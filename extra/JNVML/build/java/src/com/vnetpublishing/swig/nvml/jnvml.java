/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.vnetpublishing.swig.nvml;

public class jnvml implements jnvmlConstants {
  static {
	  try {
	     String p = com.vnetpublishing.clj.nativedep.getArchName();
	     
	     if ("windows-8.1-amd64".equals(p)) {
	    	  //System.load("C:\\Program Files\\NVIDIA Corporation\\NVSMI\\nvml.dll");
	    	  System.loadLibrary("nvml");
	          com.vnetpublishing.clj.nativedep.loadResource("/libjnvml-x86_64-w64-mingw32-0.dll","JNVML","1.0","jnvml");
	     }
	  } catch (Throwable t) {
		  
	  }
	  
  }
  public static nvmlReturn_t nvmlInit_v2() {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlInit_v2());
  }

  public static nvmlReturn_t nvmlShutdown() {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlShutdown());
  }

  public static String nvmlErrorString(nvmlReturn_t result) {
    return jnvmlJNI.nvmlErrorString(result.swigValue());
  }

  public static nvmlReturn_t nvmlSystemGetDriverVersion(String version, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlSystemGetDriverVersion(version, length));
  }

  public static nvmlReturn_t nvmlSystemGetNVMLVersion(String version, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlSystemGetNVMLVersion(version, length));
  }

  public static nvmlReturn_t nvmlSystemGetProcessName(long pid, String name, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlSystemGetProcessName(pid, name, length));
  }

  public static nvmlReturn_t nvmlUnitGetCount(int[] unitCount) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitGetCount(unitCount));
  }

  public static nvmlReturn_t nvmlUnitGetHandleByIndex(long index, SWIGTYPE_p_p_nvmlUnit_st unit) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitGetHandleByIndex(index, SWIGTYPE_p_p_nvmlUnit_st.getCPtr(unit)));
  }

  public static nvmlReturn_t nvmlUnitGetUnitInfo(SWIGTYPE_p_nvmlUnit_st unit, nvmlUnitInfo_t info) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitGetUnitInfo(SWIGTYPE_p_nvmlUnit_st.getCPtr(unit), nvmlUnitInfo_t.getCPtr(info), info));
  }

  public static nvmlReturn_t nvmlUnitGetLedState(SWIGTYPE_p_nvmlUnit_st unit, nvmlLedState_t state) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitGetLedState(SWIGTYPE_p_nvmlUnit_st.getCPtr(unit), nvmlLedState_t.getCPtr(state), state));
  }

  public static nvmlReturn_t nvmlUnitGetPsuInfo(SWIGTYPE_p_nvmlUnit_st unit, nvmlPSUInfo_t psu) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitGetPsuInfo(SWIGTYPE_p_nvmlUnit_st.getCPtr(unit), nvmlPSUInfo_t.getCPtr(psu), psu));
  }

  public static nvmlReturn_t nvmlUnitGetTemperature(SWIGTYPE_p_nvmlUnit_st unit, long type, int[] temp) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitGetTemperature(SWIGTYPE_p_nvmlUnit_st.getCPtr(unit), type, temp));
  }

  public static nvmlReturn_t nvmlUnitGetFanSpeedInfo(SWIGTYPE_p_nvmlUnit_st unit, nvmlUnitFanSpeeds_t fanSpeeds) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitGetFanSpeedInfo(SWIGTYPE_p_nvmlUnit_st.getCPtr(unit), nvmlUnitFanSpeeds_t.getCPtr(fanSpeeds), fanSpeeds));
  }

  public static nvmlReturn_t nvmlUnitGetDevices(SWIGTYPE_p_nvmlUnit_st unit, int[] deviceCount, SWIGTYPE_p_p_nvmlDevice_st devices) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitGetDevices(SWIGTYPE_p_nvmlUnit_st.getCPtr(unit), deviceCount, SWIGTYPE_p_p_nvmlDevice_st.getCPtr(devices)));
  }

  public static nvmlReturn_t nvmlSystemGetHicVersion(int[] hwbcCount, nvmlHwbcEntry_t hwbcEntries) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlSystemGetHicVersion(hwbcCount, nvmlHwbcEntry_t.getCPtr(hwbcEntries), hwbcEntries));
  }

  public static nvmlReturn_t nvmlDeviceGetCount_v2(int[] deviceCount) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetCount_v2(deviceCount));
  }

  public static nvmlReturn_t nvmlDeviceGetHandleByIndex_v2(long index, SWIGTYPE_p_p_nvmlDevice_st device) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetHandleByIndex_v2(index, SWIGTYPE_p_p_nvmlDevice_st.getCPtr(device)));
  }

  public static nvmlReturn_t nvmlDeviceGetHandleBySerial(String serial, SWIGTYPE_p_p_nvmlDevice_st device) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetHandleBySerial(serial, SWIGTYPE_p_p_nvmlDevice_st.getCPtr(device)));
  }

  public static nvmlReturn_t nvmlDeviceGetHandleByUUID(String uuid, SWIGTYPE_p_p_nvmlDevice_st device) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetHandleByUUID(uuid, SWIGTYPE_p_p_nvmlDevice_st.getCPtr(device)));
  }

  public static nvmlReturn_t nvmlDeviceGetHandleByPciBusId_v2(String pciBusId, SWIGTYPE_p_p_nvmlDevice_st device) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetHandleByPciBusId_v2(pciBusId, SWIGTYPE_p_p_nvmlDevice_st.getCPtr(device)));
  }

  public static nvmlReturn_t nvmlDeviceGetName(SWIGTYPE_p_nvmlDevice_st device, String name, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetName(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), name, length));
  }

  public static nvmlReturn_t nvmlDeviceGetIndex(SWIGTYPE_p_nvmlDevice_st device, int[] index) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetIndex(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), index));
  }

  public static nvmlReturn_t nvmlDeviceGetSerial(SWIGTYPE_p_nvmlDevice_st device, String serial, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetSerial(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), serial, length));
  }

  public static nvmlReturn_t nvmlDeviceGetUUID(SWIGTYPE_p_nvmlDevice_st device, String uuid, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetUUID(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), uuid, length));
  }

  public static nvmlReturn_t nvmlDeviceGetMinorNumber(SWIGTYPE_p_nvmlDevice_st device, int[] minorNumber) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetMinorNumber(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), minorNumber));
  }

  public static nvmlReturn_t nvmlDeviceGetInforomVersion(SWIGTYPE_p_nvmlDevice_st device, nvmlInforomObject_t object, String version, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetInforomVersion(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), object.swigValue(), version, length));
  }

  public static nvmlReturn_t nvmlDeviceGetInforomImageVersion(SWIGTYPE_p_nvmlDevice_st device, String version, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetInforomImageVersion(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), version, length));
  }

  public static nvmlReturn_t nvmlDeviceGetInforomConfigurationChecksum(SWIGTYPE_p_nvmlDevice_st device, int[] checksum) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetInforomConfigurationChecksum(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), checksum));
  }

  public static nvmlReturn_t nvmlDeviceValidateInforom(SWIGTYPE_p_nvmlDevice_st device) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceValidateInforom(SWIGTYPE_p_nvmlDevice_st.getCPtr(device)));
  }

  public static nvmlReturn_t nvmlDeviceGetDisplayMode(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlEnableState_enum display) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetDisplayMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(display)));
  }

  public static nvmlReturn_t nvmlDeviceGetDisplayActive(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlEnableState_enum isActive) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetDisplayActive(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(isActive)));
  }

  public static nvmlReturn_t nvmlDeviceGetPersistenceMode(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlEnableState_enum mode) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPersistenceMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(mode)));
  }

  public static nvmlReturn_t nvmlDeviceGetPciInfo_v2(SWIGTYPE_p_nvmlDevice_st device, nvmlPciInfo_t pci) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPciInfo_v2(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), nvmlPciInfo_t.getCPtr(pci), pci));
  }

  public static nvmlReturn_t nvmlDeviceGetMaxPcieLinkGeneration(SWIGTYPE_p_nvmlDevice_st device, int[] maxLinkGen) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetMaxPcieLinkGeneration(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), maxLinkGen));
  }

  public static nvmlReturn_t nvmlDeviceGetMaxPcieLinkWidth(SWIGTYPE_p_nvmlDevice_st device, int[] maxLinkWidth) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetMaxPcieLinkWidth(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), maxLinkWidth));
  }

  public static nvmlReturn_t nvmlDeviceGetCurrPcieLinkGeneration(SWIGTYPE_p_nvmlDevice_st device, int[] currLinkGen) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetCurrPcieLinkGeneration(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), currLinkGen));
  }

  public static nvmlReturn_t nvmlDeviceGetCurrPcieLinkWidth(SWIGTYPE_p_nvmlDevice_st device, int[] currLinkWidth) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetCurrPcieLinkWidth(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), currLinkWidth));
  }

  public static nvmlReturn_t nvmlDeviceGetClockInfo(SWIGTYPE_p_nvmlDevice_st device, nvmlClockType_t type, int[] clock) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetClockInfo(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), type.swigValue(), clock));
  }

  public static nvmlReturn_t nvmlDeviceGetMaxClockInfo(SWIGTYPE_p_nvmlDevice_st device, nvmlClockType_t type, int[] clock) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetMaxClockInfo(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), type.swigValue(), clock));
  }

  public static nvmlReturn_t nvmlDeviceGetApplicationsClock(SWIGTYPE_p_nvmlDevice_st device, nvmlClockType_t clockType, int[] clockMHz) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetApplicationsClock(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), clockType.swigValue(), clockMHz));
  }

  public static nvmlReturn_t nvmlDeviceGetDefaultApplicationsClock(SWIGTYPE_p_nvmlDevice_st device, nvmlClockType_t clockType, int[] clockMHz) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetDefaultApplicationsClock(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), clockType.swigValue(), clockMHz));
  }

  public static nvmlReturn_t nvmlDeviceResetApplicationsClocks(SWIGTYPE_p_nvmlDevice_st device) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceResetApplicationsClocks(SWIGTYPE_p_nvmlDevice_st.getCPtr(device)));
  }

  public static nvmlReturn_t nvmlDeviceGetSupportedMemoryClocks(SWIGTYPE_p_nvmlDevice_st device, int[] count, int[] clocksMHz) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetSupportedMemoryClocks(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), count, clocksMHz));
  }

  public static nvmlReturn_t nvmlDeviceGetSupportedGraphicsClocks(SWIGTYPE_p_nvmlDevice_st device, long memoryClockMHz, int[] count, int[] clocksMHz) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetSupportedGraphicsClocks(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), memoryClockMHz, count, clocksMHz));
  }

  public static nvmlReturn_t nvmlDeviceGetFanSpeed(SWIGTYPE_p_nvmlDevice_st device, int[] speed) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetFanSpeed(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), speed));
  }

  public static nvmlReturn_t nvmlDeviceGetTemperature(SWIGTYPE_p_nvmlDevice_st device, nvmlTemperatureSensors_t sensorType, int[] temp) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetTemperature(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), sensorType.swigValue(), temp));
  }

  public static nvmlReturn_t nvmlDeviceGetPerformanceState(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlPStates_enum pState) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPerformanceState(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlPStates_enum.getCPtr(pState)));
  }

  public static nvmlReturn_t nvmlDeviceGetCurrentClocksThrottleReasons(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_unsigned_long_long clocksThrottleReasons) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetCurrentClocksThrottleReasons(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_unsigned_long_long.getCPtr(clocksThrottleReasons)));
  }

  public static nvmlReturn_t nvmlDeviceGetSupportedClocksThrottleReasons(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_unsigned_long_long supportedClocksThrottleReasons) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetSupportedClocksThrottleReasons(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_unsigned_long_long.getCPtr(supportedClocksThrottleReasons)));
  }

  public static nvmlReturn_t nvmlDeviceGetPowerState(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlPStates_enum pState) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPowerState(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlPStates_enum.getCPtr(pState)));
  }

  public static nvmlReturn_t nvmlDeviceGetPowerManagementMode(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlEnableState_enum mode) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPowerManagementMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(mode)));
  }

  public static nvmlReturn_t nvmlDeviceGetPowerManagementLimit(SWIGTYPE_p_nvmlDevice_st device, int[] limit) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPowerManagementLimit(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), limit));
  }

  public static nvmlReturn_t nvmlDeviceGetPowerManagementLimitConstraints(SWIGTYPE_p_nvmlDevice_st device, int[] minLimit, int[] maxLimit) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPowerManagementLimitConstraints(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), minLimit, maxLimit));
  }

  public static nvmlReturn_t nvmlDeviceGetPowerManagementDefaultLimit(SWIGTYPE_p_nvmlDevice_st device, int[] defaultLimit) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPowerManagementDefaultLimit(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), defaultLimit));
  }

  public static nvmlReturn_t nvmlDeviceGetPowerUsage(SWIGTYPE_p_nvmlDevice_st device, int[] power) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetPowerUsage(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), power));
  }

  public static nvmlReturn_t nvmlDeviceGetEnforcedPowerLimit(SWIGTYPE_p_nvmlDevice_st device, int[] limit) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetEnforcedPowerLimit(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), limit));
  }

  public static nvmlReturn_t nvmlDeviceGetGpuOperationMode(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlGom_enum current, SWIGTYPE_p_nvmlGom_enum pending) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetGpuOperationMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlGom_enum.getCPtr(current), SWIGTYPE_p_nvmlGom_enum.getCPtr(pending)));
  }

  public static nvmlReturn_t nvmlDeviceGetMemoryInfo(SWIGTYPE_p_nvmlDevice_st device, nvmlMemory_t memory) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetMemoryInfo(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), nvmlMemory_t.getCPtr(memory), memory));
  }

  public static nvmlReturn_t nvmlDeviceGetComputeMode(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlComputeMode_enum mode) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetComputeMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlComputeMode_enum.getCPtr(mode)));
  }

  public static nvmlReturn_t nvmlDeviceGetEccMode(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlEnableState_enum current, SWIGTYPE_p_nvmlEnableState_enum pending) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetEccMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(current), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(pending)));
  }

  public static nvmlReturn_t nvmlDeviceGetTotalEccErrors(SWIGTYPE_p_nvmlDevice_st device, nvmlMemoryErrorType_t errorType, nvmlEccCounterType_t counterType, SWIGTYPE_p_unsigned_long_long eccCounts) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetTotalEccErrors(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), errorType.swigValue(), counterType.swigValue(), SWIGTYPE_p_unsigned_long_long.getCPtr(eccCounts)));
  }

  public static nvmlReturn_t nvmlDeviceGetDetailedEccErrors(SWIGTYPE_p_nvmlDevice_st device, nvmlMemoryErrorType_t errorType, nvmlEccCounterType_t counterType, nvmlEccErrorCounts_t eccCounts) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetDetailedEccErrors(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), errorType.swigValue(), counterType.swigValue(), nvmlEccErrorCounts_t.getCPtr(eccCounts), eccCounts));
  }

  public static nvmlReturn_t nvmlDeviceGetMemoryErrorCounter(SWIGTYPE_p_nvmlDevice_st device, nvmlMemoryErrorType_t errorType, nvmlEccCounterType_t counterType, nvmlMemoryLocation_t locationType, SWIGTYPE_p_unsigned_long_long count) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetMemoryErrorCounter(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), errorType.swigValue(), counterType.swigValue(), locationType.swigValue(), SWIGTYPE_p_unsigned_long_long.getCPtr(count)));
  }

  public static nvmlReturn_t nvmlDeviceGetUtilizationRates(SWIGTYPE_p_nvmlDevice_st device, nvmlUtilization_t utilization) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetUtilizationRates(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), nvmlUtilization_t.getCPtr(utilization), utilization));
  }

  public static nvmlReturn_t nvmlDeviceGetDriverModel(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlDriverModel_enum current, SWIGTYPE_p_nvmlDriverModel_enum pending) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetDriverModel(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlDriverModel_enum.getCPtr(current), SWIGTYPE_p_nvmlDriverModel_enum.getCPtr(pending)));
  }

  public static nvmlReturn_t nvmlDeviceGetVbiosVersion(SWIGTYPE_p_nvmlDevice_st device, String version, long length) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetVbiosVersion(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), version, length));
  }

  public static nvmlReturn_t nvmlDeviceGetBridgeChipInfo(SWIGTYPE_p_nvmlDevice_st device, nvmlBridgeChipHierarchy_t bridgeHierarchy) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetBridgeChipInfo(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), nvmlBridgeChipHierarchy_t.getCPtr(bridgeHierarchy), bridgeHierarchy));
  }

  public static nvmlReturn_t nvmlDeviceGetComputeRunningProcesses(SWIGTYPE_p_nvmlDevice_st device, int[] infoCount, nvmlProcessInfo_t infos) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetComputeRunningProcesses(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), infoCount, nvmlProcessInfo_t.getCPtr(infos), infos));
  }

  public static nvmlReturn_t nvmlDeviceOnSameBoard(SWIGTYPE_p_nvmlDevice_st device1, SWIGTYPE_p_nvmlDevice_st device2, int[] onSameBoard) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceOnSameBoard(SWIGTYPE_p_nvmlDevice_st.getCPtr(device1), SWIGTYPE_p_nvmlDevice_st.getCPtr(device2), onSameBoard));
  }

  public static nvmlReturn_t nvmlDeviceGetAPIRestriction(SWIGTYPE_p_nvmlDevice_st device, nvmlRestrictedAPI_t apiType, SWIGTYPE_p_nvmlEnableState_enum isRestricted) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetAPIRestriction(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), apiType.swigValue(), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(isRestricted)));
  }

  public static nvmlReturn_t nvmlDeviceGetBAR1MemoryInfo(SWIGTYPE_p_nvmlDevice_st device, nvmlBAR1Memory_t bar1Memory) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetBAR1MemoryInfo(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), nvmlBAR1Memory_t.getCPtr(bar1Memory), bar1Memory));
  }

  public static nvmlReturn_t nvmlDeviceGetAccountingMode(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlEnableState_enum mode) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetAccountingMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(mode)));
  }

  public static nvmlReturn_t nvmlDeviceGetAccountingStats(SWIGTYPE_p_nvmlDevice_st device, long pid, nvmlAccountingStats_t stats) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetAccountingStats(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), pid, nvmlAccountingStats_t.getCPtr(stats), stats));
  }

  public static nvmlReturn_t nvmlDeviceGetAccountingPids(SWIGTYPE_p_nvmlDevice_st device, int[] count, int[] pids) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetAccountingPids(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), count, pids));
  }

  public static nvmlReturn_t nvmlDeviceGetAccountingBufferSize(SWIGTYPE_p_nvmlDevice_st device, int[] bufferSize) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetAccountingBufferSize(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), bufferSize));
  }

  public static nvmlReturn_t nvmlDeviceGetRetiredPages(SWIGTYPE_p_nvmlDevice_st device, nvmlPageRetirementCause_t cause, int[] pageCount, SWIGTYPE_p_unsigned_long_long addresses) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetRetiredPages(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), cause.swigValue(), pageCount, SWIGTYPE_p_unsigned_long_long.getCPtr(addresses)));
  }

  public static nvmlReturn_t nvmlDeviceGetRetiredPagesPendingStatus(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_nvmlEnableState_enum isPending) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetRetiredPagesPendingStatus(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_nvmlEnableState_enum.getCPtr(isPending)));
  }

  public static nvmlReturn_t nvmlUnitSetLedState(SWIGTYPE_p_nvmlUnit_st unit, nvmlLedColor_t color) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlUnitSetLedState(SWIGTYPE_p_nvmlUnit_st.getCPtr(unit), color.swigValue()));
  }

  public static nvmlReturn_t nvmlDeviceSetPersistenceMode(SWIGTYPE_p_nvmlDevice_st device, nvmlEnableState_t mode) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetPersistenceMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), mode.swigValue()));
  }

  public static nvmlReturn_t nvmlDeviceSetComputeMode(SWIGTYPE_p_nvmlDevice_st device, nvmlComputeMode_t mode) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetComputeMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), mode.swigValue()));
  }

  public static nvmlReturn_t nvmlDeviceSetEccMode(SWIGTYPE_p_nvmlDevice_st device, nvmlEnableState_t ecc) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetEccMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), ecc.swigValue()));
  }

  public static nvmlReturn_t nvmlDeviceClearEccErrorCounts(SWIGTYPE_p_nvmlDevice_st device, nvmlEccCounterType_t counterType) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceClearEccErrorCounts(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), counterType.swigValue()));
  }

  public static nvmlReturn_t nvmlDeviceSetDriverModel(SWIGTYPE_p_nvmlDevice_st device, nvmlDriverModel_t driverModel, long flags) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetDriverModel(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), driverModel.swigValue(), flags));
  }

  public static nvmlReturn_t nvmlDeviceSetApplicationsClocks(SWIGTYPE_p_nvmlDevice_st device, long memClockMHz, long graphicsClockMHz) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetApplicationsClocks(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), memClockMHz, graphicsClockMHz));
  }

  public static nvmlReturn_t nvmlDeviceSetPowerManagementLimit(SWIGTYPE_p_nvmlDevice_st device, long limit) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetPowerManagementLimit(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), limit));
  }

  public static nvmlReturn_t nvmlDeviceSetGpuOperationMode(SWIGTYPE_p_nvmlDevice_st device, nvmlGpuOperationMode_t mode) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetGpuOperationMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), mode.swigValue()));
  }

  public static nvmlReturn_t nvmlDeviceSetAPIRestriction(SWIGTYPE_p_nvmlDevice_st device, nvmlRestrictedAPI_t apiType, nvmlEnableState_t isRestricted) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetAPIRestriction(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), apiType.swigValue(), isRestricted.swigValue()));
  }

  public static nvmlReturn_t nvmlDeviceSetAccountingMode(SWIGTYPE_p_nvmlDevice_st device, nvmlEnableState_t mode) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceSetAccountingMode(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), mode.swigValue()));
  }

  public static nvmlReturn_t nvmlDeviceClearAccountingPids(SWIGTYPE_p_nvmlDevice_st device) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceClearAccountingPids(SWIGTYPE_p_nvmlDevice_st.getCPtr(device)));
  }

  public static nvmlReturn_t nvmlEventSetCreate(SWIGTYPE_p_p_nvmlEventSet_st set) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlEventSetCreate(SWIGTYPE_p_p_nvmlEventSet_st.getCPtr(set)));
  }

  public static nvmlReturn_t nvmlDeviceRegisterEvents(SWIGTYPE_p_nvmlDevice_st device, java.math.BigInteger eventTypes, SWIGTYPE_p_nvmlEventSet_st set) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceRegisterEvents(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), eventTypes, SWIGTYPE_p_nvmlEventSet_st.getCPtr(set)));
  }

  public static nvmlReturn_t nvmlDeviceGetSupportedEventTypes(SWIGTYPE_p_nvmlDevice_st device, SWIGTYPE_p_unsigned_long_long eventTypes) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlDeviceGetSupportedEventTypes(SWIGTYPE_p_nvmlDevice_st.getCPtr(device), SWIGTYPE_p_unsigned_long_long.getCPtr(eventTypes)));
  }

  public static nvmlReturn_t nvmlEventSetWait(SWIGTYPE_p_nvmlEventSet_st set, nvmlEventData_t data, long timeoutms) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlEventSetWait(SWIGTYPE_p_nvmlEventSet_st.getCPtr(set), nvmlEventData_t.getCPtr(data), data, timeoutms));
  }

  public static nvmlReturn_t nvmlEventSetFree(SWIGTYPE_p_nvmlEventSet_st set) {
    return nvmlReturn_t.swigToEnum(jnvmlJNI.nvmlEventSetFree(SWIGTYPE_p_nvmlEventSet_st.getCPtr(set)));
  }

}
